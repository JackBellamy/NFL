import pandas as pd
data_plays = pd.read_csv("~/Desktop/NFL/plays.csv")
data_tracking2018 = pd.read_csv("~/Desktop/NFL/tracking2018.csv")
import matplotlib.pyplot as plt

#%%
import numpy as np
idxs_score = data_plays.query('specialTeamsPlayType == "Field Goal" & specialTeamsResult == "Kick Attempt Good"').index
idxs_miss = data_plays.query('specialTeamsPlayType == "Field Goal" & specialTeamsResult == "Kick Attempt No Good"').index
gameIds = data_plays['gameId']
playIds = data_plays['playId']
kickerIds = data_plays['kickerId']

gameId_score = []
playId_score = []
kickerId_score = []
for idx in idxs_score:
    gameId_score.append(gameIds[idx])
    playId_score.append(playIds[idx])
    kickerId_score.append(kickerIds[idx])

gameId_miss = []
playId_miss = []
kickerId_miss = []
for idx in idxs_miss:
    gameId_miss.append(gameIds[idx])
    playId_miss.append(playIds[idx])
    kickerId_miss.append(kickerIds[idx])
    
#%%    
x_pos_score_left = []
y_pos_score_left = []
for i in range(0, len(gameId_score)):
    gameId = gameId_score[i]
    playId = playId_score[i]
    kickerId = kickerId_score[i]
    x_pos_score_left.append(data_tracking2018.loc[((data_tracking2018["gameId"] == gameId) & (data_tracking2018["playId"] == playId) & (data_tracking2018["nflId"] == kickerId) & (data_tracking2018["playDirection"] == 'left')),"x"])
    y_pos_score_left.append(data_tracking2018.loc[((data_tracking2018["gameId"] == gameId) & (data_tracking2018["playId"] == playId) & (data_tracking2018["nflId"] == kickerId) & (data_tracking2018["playDirection"] == 'left')),"y"])


x_pos_miss_left = []
y_pos_miss_left = []
for i in range(0, len(gameId_miss)):
    gameId = gameId_miss[i]
    playId = playId_miss[i]
    kickerId = kickerId_miss[i]
    x_pos_miss_left.append(data_tracking2018.loc[((data_tracking2018["gameId"] == gameId) & (data_tracking2018["playId"] == playId) & (data_tracking2018["nflId"] == kickerId) & (data_tracking2018["playDirection"] == 'left')),"x"])
    y_pos_miss_left.append(data_tracking2018.loc[((data_tracking2018["gameId"] == gameId) & (data_tracking2018["playId"] == playId) & (data_tracking2018["nflId"] == kickerId) & (data_tracking2018["playDirection"] == 'left')),"y"])

x_pos_score_right = []
y_pos_score_right = []
for i in range(0, len(gameId_score)):
    gameId = gameId_score[i]
    playId = playId_score[i]
    kickerId = kickerId_score[i]
    x_pos_score_right.append(data_tracking2018.loc[((data_tracking2018["gameId"] == gameId) & (data_tracking2018["playId"] == playId) & (data_tracking2018["nflId"] == kickerId) & (data_tracking2018["playDirection"] == 'right')),"x"])
    y_pos_score_left.append(data_tracking2018.loc[((data_tracking2018["gameId"] == gameId) & (data_tracking2018["playId"] == playId) & (data_tracking2018["nflId"] == kickerId) & (data_tracking2018["playDirection"] == 'right')),"y"])


x_pos_miss_right = []
y_pos_miss_right = []
for i in range(0, len(gameId_miss)):
    gameId = gameId_miss[i]
    playId = playId_miss[i]
    kickerId = kickerId_miss[i]
    x_pos_miss_right.append(data_tracking2018.loc[((data_tracking2018["gameId"] == gameId) & (data_tracking2018["playId"] == playId) & (data_tracking2018["nflId"] == kickerId) & (data_tracking2018["playDirection"] == 'right')),"x"])
    y_pos_miss_right.append(data_tracking2018.loc[((data_tracking2018["gameId"] == gameId) & (data_tracking2018["playId"] == playId) & (data_tracking2018["nflId"] == kickerId) & (data_tracking2018["playDirection"] == 'right')),"y"])


#%%
import numpy as np 
import matplotlib.colors as colors


def truncate_colormap(cmap, minval=0.0, maxval=1.0, n=100):
    new_cmap = colors.LinearSegmentedColormap.from_list(
        'trunc({n},{a:.2f},{b:.2f})'.format(n=cmap.name, a=minval, b=maxval),
        cmap(np.linspace(minval, maxval, n)))
    return new_cmap

cmap1 = plt.get_cmap('gnuplot2')
lowval = 0
upval = 1
cmapcol1 = truncate_colormap(cmap1, lowval, upval)


x_pos_score_left = [item for sublist in x_pos_score_left for item in sublist]
y_pos_score_left = [item for sublist in y_pos_score_left for item in sublist]
x_pos_miss_left = [item for sublist in x_pos_miss_left for item in sublist]
y_pos_miss_left = [item for sublist in y_pos_miss_left for item in sublist]
x_pos_score_right = [item for sublist in x_pos_score_right for item in sublist]
y_pos_score_right = [item for sublist in y_pos_score_right for item in sublist]
x_pos_miss_right = [item for sublist in x_pos_miss_right for item in sublist]
y_pos_miss_right = [item for sublist in y_pos_miss_right for item in sublist]


x_pos_score_right_flipped = []
for i in x_pos_score_right:
    x_pos_score_right_flipped.append(120-i)
x_pos_miss_right_flipped = []
for i in x_pos_miss_right:
    x_pos_miss_right_flipped.append(120-i)
y_pos_score_right_flipped = []
for i in y_pos_score_right:
    y_pos_score_right_flipped.append(53.3-i)
y_pos_miss_right_flipped = []
for i in y_pos_miss_right:
    y_pos_miss_right_flipped.append(53.3-i)

#%%
x_pos_score = x_pos_score_left + x_pos_score_right_flipped
x_pos_miss = x_pos_miss_left + x_pos_miss_right_flipped
y_pos_score = y_pos_score_left + y_pos_score_right_flipped
y_pos_miss = y_pos_miss_left + y_pos_miss_right_flipped


#%%
fig, axs = plt.subplots(1,2,figsize=(15, 15))
axs[0].hist2d(x_pos_score, y_pos_score, bins = 50, cmap = cmapcol1)
axs[0].set_xlim([0, 120])
axs[0].set_ylim([0, 53.3])
axs[0].set_facecolor('black')
axs[0].set_box_aspect(53.3/120)

axs[1].hist2d(x_pos_miss, y_pos_miss, bins = 50, cmap = cmapcol1)
axs[1].set_xlim([0, 120])
axs[1].set_ylim([0, 53.3])
axs[1].set_facecolor('black')
axs[1].set_box_aspect(53.3/120)

#%%
x_pos_score = np.array(x_pos_score)
y_pos_score = np.array(y_pos_score)
x_pos_miss = np.array(x_pos_miss)
y_pos_miss = np.array(y_pos_miss)
fig1, axs1 = plt.subplots(1,1,figsize=(15, 15))
upper = min(max(x_pos_score), max(x_pos_miss))
lower = max(min(x_pos_score), min(x_pos_miss))
num_bins = 20 #10 is nice
val_score = (axs1.hist(x_pos_score, bins = num_bins, range =[lower, upper], color = "red"))[0]
val_miss = (axs1.hist(x_pos_miss, bins = num_bins, range =[lower, upper], color = "blue"))[0]
intervals = (axs1.hist(x_pos_score, bins = num_bins, range =[lower, upper], color = "red"))[1]


#ignore this plot
fig, axs = plt.subplots(1,1,figsize=(15, 15))
histo_vals = []
for i in range(0, len(val_miss)):
    histo_vals.append((val_score[i]/(val_score[i] + val_miss[i]))*100)
axs.plot(histo_vals)
axs.set_ylabel("Percentage Success (%)")
tick_locs = range(0, num_bins)
tick_labels = []
for i in range(0, len(intervals)-1):
    tick_labels.append([float(str(intervals[i])[:4]), (str(intervals[i+1])[:4])])
axs.set_xticks(tick_locs, tick_labels)
axs.tick_params(axis='both', which='major', labelsize=8)
